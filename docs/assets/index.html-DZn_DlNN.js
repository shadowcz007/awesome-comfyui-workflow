import{_ as p,r as o,o as c,c as i,a as n,b as a,d as t,e}from"./app-BGqkLjHw.js";const l="/awesome-comfyui-workflow/assets/API01-C3VSzi19.png",u="/awesome-comfyui-workflow/assets/API02-BDcjvxSr.png",r="/awesome-comfyui-workflow/assets/API-03-DW_y3-g-.png",d="/awesome-comfyui-workflow/assets/API-04-CItmxP6i.png",k="/awesome-comfyui-workflow/assets/API-05-SRm6s36i.png",m={},v=e(`<h1 id="适合高级用户的自定义" tabindex="-1"><a class="header-anchor" href="#适合高级用户的自定义"><span>适合高级用户的自定义</span></a></h1><p>ComfyUI 的自定义节点引入了直接的 Python 代码，这可能导致安全风险。由于缺乏沙箱/安全机制，自定义节点的代码可以执行任何可能具有恶意意图的操作。</p><ul><li>提供信任机制</li><li>提供节点的沙盒版本</li></ul><h2 id="如何开发自定义节点" tabindex="-1"><a class="header-anchor" href="#如何开发自定义节点"><span>如何开发自定义节点？</span></a></h2><ul><li>python 编写节点运行时</li><li>JavaScript 编写节点 UI</li></ul><p>你的第一个自定义节点： https://github.com/shadowcz007/comfyui-mixlab-nodes</p><p>前端界面是由 HTML、CSS、Javascript 编写的，每个节点都有自己的一个生命周期管理，例如以下：</p><h3 id="js-代码示例" tabindex="-1"><a class="header-anchor" href="#js-代码示例"><span>JS 代码示例</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../scripts/app.js&#39;</span>
<span class="token keyword">const</span> ext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 扩展的唯一名称</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Example.LoggingExtension&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 页面加载后立即运行的任何初始设置</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[logging]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;extension init&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 应用程序创建后运行的任何设置</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[logging]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;extension setup&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">addCustomNodeDefs</span><span class="token punctuation">(</span><span class="token parameter">defs<span class="token punctuation">,</span> app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 添加自定义节点定义</span>
    <span class="token comment">// 这些定义将自动配置和注册</span>
    <span class="token comment">// defs 是核心节点的查找表，将您的节点添加到其中</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token string">&#39;[logging]&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;add custom node definitions&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;current nodes:&#39;</span><span class="token punctuation">,</span>
      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>defs<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">getCustomWidgets</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回自定义小部件类型</span>
    <span class="token comment">// 请参阅 ComfyWidgets 获取小部件示例</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[logging]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;provide custom widgets&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">beforeRegisterNodeDef</span><span class="token punctuation">(</span><span class="token parameter">nodeType<span class="token punctuation">,</span> nodeData<span class="token punctuation">,</span> app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在节点定义注册到图形之前运行自定义逻辑</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[logging]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;before register node: &#39;</span><span class="token punctuation">,</span> nodeType<span class="token punctuation">,</span> nodeData<span class="token punctuation">)</span>

    <span class="token comment">// 这将对每个节点定义触发，因此只记录一次</span>
    <span class="token keyword">delete</span> ext<span class="token punctuation">.</span>beforeRegisterNodeDef
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">registerCustomNodes</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//在此处注册任何自定义节点实现，以便比自定义节点定义更灵活。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[logging]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;register custom nodes&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">loadedGraphNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当加载/拖动/等操作工作流程的 JSON 或 PNG 时，对每个节点触发</span>
    <span class="token comment">// 如果在后端出现问题并且想要在前端修复工作流程</span>
    <span class="token comment">// 这就是进行修复的地方</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[logging]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;loaded graph node: &#39;</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span>

    <span class="token comment">// This fires for every node on each load so only log once</span>
    <span class="token keyword">delete</span> ext<span class="token punctuation">.</span>loadedGraphNode
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">nodeCreated</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[logging]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;node created: &#39;</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span>
    <span class="token comment">// 每次构建节点时触发</span>
    <span class="token comment">// 您可以在此处修改小部件、添加处理程序等</span>

    <span class="token comment">// 这对每个节点触发，所以只记录一次</span>
    <span class="token keyword">delete</span> ext<span class="token punctuation">.</span>nodeCreated
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">registerExtension</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api-模式的一个简单指南" tabindex="-1"><a class="header-anchor" href="#api-模式的一个简单指南"><span>API 模式的一个简单指南</span></a></h2><p>如何使用 ComfyUI 的 API,通过命令行和脚本控制 ComfyUI</p>`,11),g={href:"https://medium.com/@yushantripleseven/comfyui-using-the-api-261293aa055a",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/yushan777/comfyui-api-part1-basic-workflow",target:"_blank",rel:"noopener noreferrer"},h=e('<blockquote><p>示例工作流 <img src="'+l+'" alt="2"></p></blockquote><p>我们需要启用 Dev Mode. 单击菜单面板右上角的齿轮图标。</p><p><img src="'+u+'" alt="3"></p><p>查看 Enable Dev mode Options</p><p><img src="'+r+'" alt="-"></p><p>Save (API Format)菜单面板中应出现一个新按钮。</p><p><img src="'+d+'" alt="-"></p><p>单击该 Save(API Format)按钮，它将以默认名称保存一个文件 workflow_api.json。使用普通的 ComfyUI 工作流程 json 文件，可以将它们拖放到主 UI 中并加载工作流程。</p><p>将 api 格式 json 拖放到 ComfyUI 中不会加载工作流程。它仅包含用于功能目的的足够节点数据，并且不包含位置或布局信息。因此，如果您确实需要可视化并查看工作流程，最好也通过普通按钮保存常规工作流程 json Save。</p><p>现在在您选择的文本编辑器中打开此文件。您应该会看到类似于下面的内容。</p><p><img src="'+k+'" alt="-"></p><p>您可以看到每个部分（为了清晰起见，用彩色表示）都以数字开头。这是 Node ID. 如果您查看第一个节点（黄色），您将看到它的节点 ID 为 ，并且&quot;3&quot;是.KSamplerclass_type</p><p>值得注意的是，它们 Node IDs 可能有所不同。如果您从头开始重新构建自己的工作流程并添加、删除节点，那么它们将与此处显示的不同。（ 原始节点不会以 api 格式显示——仅显示核心节点。将来可能会改变）</p><p>让我们创建一个名为 的新 Python 脚本 basic_workflow_api.py。</p>',14),f={href:"https://github.com/yushan777/comfyui-api-part1-basic-workflow/blob/main/basic_workflow_api.py",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>将提示工作流发送到指定的 URL http://127.0.0.1:8188/prompt 并将其排队到在该地址运行的 ComfyUI 服务器上</p><blockquote><p>This function sends a prompt workflow to the specified URL (http://127.0.0.1:8188/prompt) and queues it on the ComfyUI server running at that address.</p></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">queue_prompt</span><span class="token punctuation">(</span>prompt_workflow<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;prompt&quot;</span><span class="token punctuation">:</span> prompt_workflow<span class="token punctuation">}</span>
    data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    req <span class="token operator">=</span>  request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8188/prompt&quot;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成代码后，运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python3 basic_workflow_api.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function w(_,x){const s=o("ExternalLinkIcon");return c(),i("div",null,[v,n("p",null,[n("a",g,[a("原文"),t(s)]),n("a",b,[a("代码仓库"),t(s)])]),h,n("p",null,[n("a",f,[a("参考"),t(s)])]),y])}const C=p(m,[["render",w],["__file","index.html.vue"]]),S=JSON.parse('{"path":"/posts/tutorial/advanced/","title":"适合高级用户的自定义","lang":"en-US","frontmatter":{"description":"适合高级用户的自定义 ComfyUI 的自定义节点引入了直接的 Python 代码，这可能导致安全风险。由于缺乏沙箱/安全机制，自定义节点的代码可以执行任何可能具有恶意意图的操作。 提供信任机制 提供节点的沙盒版本 如何开发自定义节点？ python 编写节点运行时 JavaScript 编写节点 UI 你的第一个自定义节点： https://gith...","head":[["meta",{"property":"og:url","content":"https://www.mixcomfy.com/awesome-comfyui-workflow/posts/tutorial/advanced/"}],["meta",{"property":"og:site_name","content":"ComfyUI中文爱好者社区"}],["meta",{"property":"og:title","content":"适合高级用户的自定义"}],["meta",{"property":"og:description","content":"适合高级用户的自定义 ComfyUI 的自定义节点引入了直接的 Python 代码，这可能导致安全风险。由于缺乏沙箱/安全机制，自定义节点的代码可以执行任何可能具有恶意意图的操作。 提供信任机制 提供节点的沙盒版本 如何开发自定义节点？ python 编写节点运行时 JavaScript 编写节点 UI 你的第一个自定义节点： https://gith..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-20T12:52:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-20T12:52:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适合高级用户的自定义\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-20T12:52:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"如何开发自定义节点？","slug":"如何开发自定义节点","link":"#如何开发自定义节点","children":[{"level":3,"title":"JS 代码示例","slug":"js-代码示例","link":"#js-代码示例","children":[]}]},{"level":2,"title":"API 模式的一个简单指南","slug":"api-模式的一个简单指南","link":"#api-模式的一个简单指南","children":[]}],"git":{"updatedTime":1713617575000,"contributors":[{"name":"shadowcz007","email":"chizhiwei007@163.com","commits":1}]},"filePathRelative":"posts/tutorial/advanced/index.md","autoDesc":true,"excerpt":"\\n<p>ComfyUI 的自定义节点引入了直接的 Python 代码，这可能导致安全风险。由于缺乏沙箱/安全机制，自定义节点的代码可以执行任何可能具有恶意意图的操作。</p>\\n<ul>\\n<li>提供信任机制</li>\\n<li>提供节点的沙盒版本</li>\\n</ul>\\n<h2>如何开发自定义节点？</h2>\\n<ul>\\n<li>python 编写节点运行时</li>\\n<li>JavaScript 编写节点 UI</li>\\n</ul>\\n<p>你的第一个自定义节点：\\nhttps://github.com/shadowcz007/comfyui-mixlab-nodes</p>\\n<p>前端界面是由 HTML、CSS、Javascript 编写的，每个节点都有自己的一个生命周期管理，例如以下：</p>"}');export{C as comp,S as data};
